# Your keymap
#
# Atom keymaps work similarly to style sheets. Just as style sheets use
# selectors to apply styles to elements, Atom keymaps use selectors to associate
# keystrokes with events in specific contexts. Unlike style sheets however,
# each selector can only be declared once.
#
# You can create a new keybinding in this file by typing "key" and then hitting
# tab.
#
# Here's an example taken from Atom's built-in keymap:
#
# 'atom-text-editor':
#   'enter': 'editor:newline'
#
# 'atom-workspace':
#   'ctrl-shift-p': 'core:move-up'
#   'ctrl-p': 'core:move-down'
#
# You can find more information about keymaps in these guides:
# * https://atom.io/docs/latest/using-atom-basic-customization#customizing-key-bindings
# * https://atom.io/docs/latest/behind-atom-keymaps-in-depth
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

#general atom key bindings
'atom-text-editor':
  'cmd-o o': 'advanced-open-file:toggle'
  'cmd-o r': 'recent-files-fuzzy-finder:toggle-finder'
  'cmd-n': 'pane:split-right'

# in insertMode
'atom-text-editor.vim-mode-plus.insert-mode,
 atom-text-editor.vim-mode-plus.visual-mode':
  'j k': 'vim-mode-plus:reset-normal-mode' # in visual-mode

'atom-text-editor.vim-mode-plus.normal-mode':
  ':': 'vim-mode-plus-ex-mode:open'
  '!': 'vim-mode-plus-ex-mode:toggle-setting'

'atom-text-editor.vim-mode-plus.visual-mode,
 atom-text-editor.vim-mode-plus.normal-mode':
  'shift-j': 'vim-mode-plus:scroll-half-screen-down'
  'shift-k': 'vim-mode-plus:scroll-half-screen-up'

# make everything like spacemacs?
'atom-text-editor.vim-mode-plus:not(.insert-mode)':
  'space j': 'jumpy:toggle'

'atom-workspace atom-text-editor:not(.mini)':
    'shift-enter': 'unset!'

# advance open file
'.advanced-open-file':
  'cmd-j': 'advanced-open-file:move-cursor-down'
  'cmd-k': 'advanced-open-file:move-cursor-up'
  'cmd-h': 'advanced-open-file:delete-path-component'
